var documenterSearchIndex = {"docs":
[{"location":"api/#API-documentation","page":"API documentation","title":"API documentation","text":"","category":"section"},{"location":"api/#Construct-and-work-with-a-CiteLibrary","page":"API documentation","title":"Construct and work with a CiteLibrary","text":"","category":"section"},{"location":"api/","page":"API documentation","title":"API documentation","text":"citeLibrary\ncollectiontypes\ncollections","category":"page"},{"location":"api/#CitableLibrary.citeLibrary","page":"API documentation","title":"CitableLibrary.citeLibrary","text":"Construct a CiteLibrary.\n\nciteLibrary(collections; libname, liburn, license, cexversion)\n\n\n\n\n\n\n","category":"function"},{"location":"api/#CitableLibrary.collectiontypes","page":"API documentation","title":"CitableLibrary.collectiontypes","text":"List types of collections in library.\n\ncollectiontypes(lib)\n\n\n\n\n\n\n","category":"function"},{"location":"api/#CitableLibrary.collections","page":"API documentation","title":"CitableLibrary.collections","text":"List all collections in the library.\n\ncollections(lib)\n\n\n\n\n\n\nList all collections in the library of type T.\n\ncollections(lib, T)\n\n\n\n\n\n\n","category":"function"},{"location":"api/#Serialize-a-library","page":"API documentation","title":"Serialize a library","text":"","category":"section"},{"location":"api/","page":"API documentation","title":"API documentation","text":"cex","category":"page"},{"location":"api/#CitableBase.cex","page":"API documentation","title":"CitableBase.cex","text":"Delegate cex to specific functions based on  type's citable trait value.\n\ncex(x; delimiter)\n\n\n\n\n\n\nIt is an error to invoke the cex function on material that is not citable.\n\ncex(, x; delimiter)\n\n\n\n\n\n\nCitable text content should implement cex.\n\ncex(, txt; delimiter)\n\n\n\n\n\n\nCitable content should implement cex.\n\ncex(, obj; delimiter)\n\n\n\n\n\n\nDelegate cex to specific functions based on  type's CitableLibraryTrait value.\n\ncex(urn, x)\n\n\n\n\n\n\nIt is an error to invoke the cex function with collections that are not citable.\n\ncex(_, urn, x)\n\n\n\n\n\n\nSerialize contents of lib to a CEX string.\n\ncex(lib; delimiter)\n\n\n\n\n\n\n","category":"function"},{"location":"api/#Functions-operating-on-citable-collections","page":"API documentation","title":"Functions operating on citable collections","text":"","category":"section"},{"location":"api/","page":"API documentation","title":"API documentation","text":"urncontains\nurnequals\niterate\ncitable","category":"page"},{"location":"api/#CitableBase.urncontains","page":"API documentation","title":"CitableBase.urncontains","text":"Urn subtypes should implement urncontains(urn1::U, urn2::U)::Bool\n\n\n\n\n\n","category":"function"},{"location":"api/#CitableLibrary.urnequals","page":"API documentation","title":"CitableLibrary.urnequals","text":"Delegate urnequals to specific functions based on  type's CitableLibraryTrait value.\n\n\n\n\n\nIt is an error to invoke the urnequals function with collections that are not citable.\n\n\n\n\n\nApply urnequals to all collections in lib of type T.\n\nurnequals(urn, lib, T)\n\n\nReturns a possibly empty list of objects.\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.iterate","page":"API documentation","title":"Base.iterate","text":"iterate(iter [, state]) -> Union{Nothing, Tuple{Any, Any}}\n\nAdvance the iterator to obtain the next element. If no elements remain, nothing should be returned. Otherwise, a 2-tuple of the next element and the new iteration state should be returned.\n\n\n\n\n\n","category":"function"},{"location":"api/#CitableLibrary.citable","page":"API documentation","title":"CitableLibrary.citable","text":"True if x has the value CitableLibraryCollection for the CitableLibraryTrait.\n\n\n\n\n\nTrue if x has the value CitableLibraryCollection for the CitableLibraryTrait.\n\ncitable(_, x)\n\n\n\n\n\n\n","category":"function"},{"location":"api/#Internals","page":"API documentation","title":"Internals","text":"","category":"section"},{"location":"api/","page":"API documentation","title":"API documentation","text":"CitableLibrary.UuidUrn\nCitableLibrary.uuidUrn","category":"page"},{"location":"api/#CitableLibrary.UuidUrn","page":"API documentation","title":"CitableLibrary.UuidUrn","text":"A UUID value in URN notation.\n\n\n\n\n\n","category":"type"},{"location":"api/#CitableLibrary.uuidUrn","page":"API documentation","title":"CitableLibrary.uuidUrn","text":"Generate a new UuidUrn\n\nuuidUrn()\n\n\n\n\n\n\n","category":"function"},{"location":"trait/#The-CitableLibraryTrait","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"","category":"section"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"The  CitableLibraryTrait applies to collections of content that can be retrieved by reference to URNs. Implementations of the CitableLibraryTrait can be searched by URN value, can be serialized to CEX format, and can be iterated using Julia's generic Iteration interface.","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"To comply with Julia's Iteration interface, types supporting the CitableLibraryTrait should implement at least iterate(iter) and iterate(iter, state):  see the Julia documentation.","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"To make the collection searchable and serializable, the type should support the urnequals, urncontains and cex functions.  The following example illustrates how you can do that.","category":"page"},{"location":"trait/#How-to-implement-the-CitableLibraryTrait","page":"The CitableLibraryTrait","title":"How to implement the CitableLibraryTrait","text":"","category":"section"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"In this example, we'll create a collection type for a reading list of books, and make it comply with the CitableLibraryTrait.  To do that, we'll need to use both the CitableLibrary and CitableBase packages.","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"using CitableLibrary\nusing CitableBase","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"The CitableLibraryTrait requires us to be able to find contain by URN values. We could use existing implementations of the URN abstraction (such as the Cite2Urn and the CtsUrn), but for this example we'll invent our own URN type. Our ReadingList type will be nothing more than a list of those URN values.","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"struct IsbnUrn <: Urn\n    isbn::AbstractString\nend\n\nstruct ReadingList\n    reff::Vector{IsbnUrn}\nend","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"Now we can instantiate a ReadingList.","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"isbns = [IsbnUrn(\"urn:isbn:022661283X\"),IsbnUrn(\"urn:isbn:3030234134\"),IsbnUrn(\"urn:isbn:022656875X\")]\nreadingList = ReadingList(isbns)","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"To print and display our custom type, it can be convenient to override Base.show.","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"import Base: show\nfunction show(io::IO, u::IsbnUrn)\n    print(io, u.isbn)\nend","category":"page"},{"location":"trait/#Defining-a-CitableLibraryTrait","page":"The CitableLibraryTrait","title":"Defining a CitableLibraryTrait","text":"","category":"section"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"The first step is to define that our new type fulfills the CitableLibraryTrait.","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"import CitableLibrary: CitableLibraryTrait\nCitableLibraryTrait(::Type{ReadingList}) = CitableLibraryCollection()","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"We can verify that we've done that correctly.","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"CitableLibraryTrait(typeof(readingList))","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"This can also be verified using the citable function:","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"citable(readingList)","category":"page"},{"location":"trait/#Implementing-the-four-required-functions","page":"The CitableLibraryTrait","title":"Implementing the four required functions","text":"","category":"section"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"Now we need to define specific methods for the four functions urnequals, urncontains, cex and fromcex.  First we import them (rather than using them). Note that we need to import cex and fromcex from CitableBase.","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"import CitableLibrary: urnequals\nimport CitableLibrary: urncontains\nimport CitableBase: cex\nimport CitableBase: fromcex","category":"page"},{"location":"trait/#Selection-by-URN-logic","page":"The CitableLibraryTrait","title":"Selection by URN logic","text":"","category":"section"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"All our implementation needs to do is specify the correct types for our urn and our collection.  (For ISBN URNs, we've chosen to implement urncontains and urnequals similarly, but you can define URN containment in whatever way is appropriate for the URN type you are using.)","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"# Returns one IsbnUrn or nothing\nfunction urnequals(u::IsbnUrn, faves::ReadingList)\n    filtered = filter(ref -> ref == u, faves.reff)\n    isempty(filtered) ? nothing : filtered[1]\nend\n\n# Returns a (possibly empty) list of IsbnUrns\nfunction urncontains(u::IsbnUrn, faves::ReadingList)\n    filter(ref -> ref == u, faves.reff)\nend","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"Let's test our new functions.  urnequals returns a single object or nothing.","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"# URN we'll search for:\ndistant = isbns[1]\nurnequals(distant, readingList)","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"urncontains returns a (possibly empty) Vector.","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"urncontains(distant, readingList)","category":"page"},{"location":"trait/#Serialization-to-CEX","page":"The CitableLibraryTrait","title":"Serialization to CEX","text":"","category":"section"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"A real application would serialize a citable collection to one of the defined blocks of a CEX document.  For this demo, we'll use a fake block heading, and serialize our URNs one per line.","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"# Format as one ISBN string per line.\nfunction cex(reading::ReadingList)\n    header = \"#!fakecexblock\\n\"\n    strings = map(ref -> ref.isbn, reading.reff)\n    header * join(strings, \"\\n\")\nend","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"# Instantiate a ReadingList from CEX:\nfunction fromcex(src::AbstractString, ReadingList)\n    isbns = []\n    lines = split(src, \"\\n\")\n    for i in 2:length(lines)\n        push!(isbns,IsbnUrn(lines[i]))\n    end\n    ReadingList(isbns)\nend","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"cex returns a text block. This demo returns a simple list of values with a header line.","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"cex(readingList) |> print","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"fromcex reads a CEX block and instantiates a collection.","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"block = \"\"\"#!fakecexblock\nurn:isbn:022661283X\nurn:isbn:3030234134\nurn:isbn:022656875X\n\"\"\"\nfromcex(block, ReadingList)","category":"page"},{"location":"trait/#Iteration","page":"The CitableLibraryTrait","title":"Iteration","text":"","category":"section"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"Finally, we should also implement the Base.iterate method.","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"import Base: iterate\n\nfunction iterate(rlist::ReadingList)\n    (rlist.reff[1], 2)\nend\n\nfunction iterate(rlist::ReadingList, state)\n    if state > length(rlist.reff)\n        nothing\n    else\n        (rlist.reff[state], state + 1)\n    end\nend","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"Iteration:","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"for isbn in readingList\n   println(isbn)\nend","category":"page"},{"location":"library/#The-CitableLibrary","page":"The CitableLibrary","title":"The CitableLibrary","text":"","category":"section"},{"location":"library/","page":"The CitableLibrary","title":"The CitableLibrary","text":"a library has a list of 0 or more collection objects implementing the CitableLibraryTrait\ncontent can be selected from collections using URN logic\nthe library can be serialized to plain text in CEX format","category":"page"},{"location":"library/","page":"The CitableLibrary","title":"The CitableLibrary","text":"This example builds a library with a single citable collection.  The collection is of a type called ReadingList, and its contents are a list of ISBN values.  (The following section on the CitableLibraryTrait shows you how to implement your own citable collection by walking through the implementation of the ReadingList type.)","category":"page"},{"location":"library/","page":"The CitableLibrary","title":"The CitableLibrary","text":"using CitableLibrary\nusing CitableBase\n\nstruct IsbnUrn <: Urn\n    isbn::AbstractString\nend\nimport Base: show\nfunction show(io::IO, u::IsbnUrn)\n    print(io, u.isbn)\nend\n\nstruct ReadingList\n    reff::Vector{IsbnUrn}\nend\n\nimport CitableLibrary: CitableLibraryTrait\nimport CitableLibrary: urnequals\nimport CitableLibrary: urncontains\nCitableLibraryTrait(::Type{ReadingList}) = CitableLibraryCollection()\n\n\nfunction urnequals(isbn::IsbnUrn, rlist::ReadingList)\n    matches = filter(i -> i == isbn, rlist.reff)\n    isempty(matches) ? nothing : matches[1]\nend\n\nfunction urncontains(isbn::IsbnUrn, rlist::ReadingList)\n    filter(i -> i == isbn, rlist.reff)\nend\n\nimport CitableBase: CitableTrait\nstruct IsbnCitable <: CitableTrait end\nCitableTrait(::Type{ReadingList})  = IsbnCitable\nimport CitableLibrary: cex\nfunction cex(reading::ReadingList; delimiter = \"|\")\n    header = \"#!fakecexblock\\n\"\n    strings = map(ref -> ref.isbn, reading.reff)\n    header * join(strings, \"\\n\")\nend\n\nimport CitableBase: fromcex\nfunction fromcex(src::AbstractString, ReadingList)\n    isbns = []\n    lines = split(src, \"\\n\")\n    for i in 2:length(lines)\n        push!(isbns,IsbnUrn(lines[i]))\n    end\n    ReadingList(isbns)\nend\n\nisbns = [IsbnUrn(\"urn:isbn:022661283X\"),IsbnUrn(\"urn:isbn:3030234134\"),IsbnUrn(\"urn:isbn:022656875X\")]\nrl = ReadingList(isbns)\n\ncitelib = citeLibrary([rl])","category":"page"},{"location":"library/","page":"The CitableLibrary","title":"The CitableLibrary","text":"citelib","category":"page"},{"location":"library/#Library-metadata","page":"The CitableLibrary","title":"Library metadata","text":"","category":"section"},{"location":"library/","page":"The CitableLibrary","title":"The CitableLibrary","text":"libname(citelib)","category":"page"},{"location":"library/","page":"The CitableLibrary","title":"The CitableLibrary","text":"liburn(citelib)","category":"page"},{"location":"library/","page":"The CitableLibrary","title":"The CitableLibrary","text":"license(citelib)","category":"page"},{"location":"library/","page":"The CitableLibrary","title":"The CitableLibrary","text":"cexversion(citelib)","category":"page"},{"location":"library/#Find-out-about-collections-in-library","page":"The CitableLibrary","title":"Find out about collections in library","text":"","category":"section"},{"location":"library/","page":"The CitableLibrary","title":"The CitableLibrary","text":"collectiontypes(citelib)","category":"page"},{"location":"library/","page":"The CitableLibrary","title":"The CitableLibrary","text":"collections(citelib)","category":"page"},{"location":"library/","page":"The CitableLibrary","title":"The CitableLibrary","text":"collections(citelib, ReadingList)","category":"page"},{"location":"library/#Query-library-by-URN-value","page":"The CitableLibrary","title":"Query library by URN value","text":"","category":"section"},{"location":"library/","page":"The CitableLibrary","title":"The CitableLibrary","text":"urn = IsbnUrn(\"urn:isbn:022661283X\")\nurnequals(urn, citelib, ReadingList)","category":"page"},{"location":"library/","page":"The CitableLibrary","title":"The CitableLibrary","text":"urncontains(urn, citelib, ReadingList)","category":"page"},{"location":"library/#Serialize","page":"The CitableLibrary","title":"Serialize","text":"","category":"section"},{"location":"library/","page":"The CitableLibrary","title":"The CitableLibrary","text":"A library can be serialized to CEX format.","category":"page"},{"location":"library/","page":"The CitableLibrary","title":"The CitableLibrary","text":"cex(citelib) |> print","category":"page"},{"location":"library/","page":"The CitableLibrary","title":"The CitableLibrary","text":"Individual collections can be instantiated from complete CEX blocks.","category":"page"},{"location":"library/","page":"The CitableLibrary","title":"The CitableLibrary","text":"warning: Warning\nfromcex is not yet implemented for an entire library. Follow this issue in the issue tracker.","category":"page"},{"location":"library/","page":"The CitableLibrary","title":"The CitableLibrary","text":"Instantiate a ReadingList from a CEX block:","category":"page"},{"location":"library/","page":"The CitableLibrary","title":"The CitableLibrary","text":"block = \"\"\"#!fakecexblock\nurn:isbn:022661283X\nurn:isbn:3030234134\nurn:isbn:022656875X\n\"\"\"\nfromcex(block, ReadingList)","category":"page"},{"location":"#CitableLibrary.jl","page":"Home","title":"CitableLibrary.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The two main elements of the package are:","category":"page"},{"location":"","page":"Home","title":"Home","text":"the CitableLibrary type\nthe CitableLibraryTrait","category":"page"},{"location":"","page":"Home","title":"Home","text":"They are documented in the following pages.","category":"page"}]
}
