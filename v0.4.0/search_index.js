var documenterSearchIndex = {"docs":
[{"location":"api/#API-documentation","page":"API documentation","title":"API documentation","text":"","category":"section"},{"location":"api/#Construct-and-work-with-a-CiteLibrary","page":"API documentation","title":"Construct and work with a CiteLibrary","text":"","category":"section"},{"location":"api/","page":"API documentation","title":"API documentation","text":"library\ncollectiontypes\ncollections\nlicense\ncexversion","category":"page"},{"location":"api/#CitableLibrary.library","page":"API documentation","title":"CitableLibrary.library","text":"Construct a CiteLibrary.\n\nlibrary(collections; libname, liburn, license, cexversion)\n\n\nOptional parameters\n\nliburn Unique identifier for this library. Must be a subtype of Urn.\nlibname Name of library (value returned by label)\nlicense License. Default is cc-nc-by.\ncexversion Version of the CEX standard used in serializing library. Default is the current version.\n\n\n\n\n\n","category":"function"},{"location":"api/#CitableLibrary.collectiontypes","page":"API documentation","title":"CitableLibrary.collectiontypes","text":"List types of collections in library.\n\ncollectiontypes(lib)\n\n\n\n\n\n\n","category":"function"},{"location":"api/#CitableLibrary.collections","page":"API documentation","title":"CitableLibrary.collections","text":"List all collections in the library.\n\ncollections(lib)\n\n\n\n\n\n\nList all collections in the library of type T.\n\ncollections(lib, T)\n\n\n\n\n\n\n","category":"function"},{"location":"api/#CitableLibrary.license","page":"API documentation","title":"CitableLibrary.license","text":"License for collected material in library as a whole.\n\nlicense(lib)\n\n\n\n\n\n\n","category":"function"},{"location":"api/#CitableLibrary.cexversion","page":"API documentation","title":"CitableLibrary.cexversion","text":"CEX version to use in serialization.\n\ncexversion(lib)\n\n\n\n\n\n\n","category":"function"},{"location":"api/#Functions-operating-on-citable-collections","page":"API documentation","title":"Functions operating on citable collections","text":"","category":"section"},{"location":"api/","page":"API documentation","title":"API documentation","text":"citablecollection","category":"page"},{"location":"api/#CitableLibrary.citablecollection","page":"API documentation","title":"CitableLibrary.citablecollection","text":"True if x has the value CitableLibraryCollection for the CitableLibraryTrait.\n\ncitablecollection(x)\n\n\n\n\n\n\n","category":"function"},{"location":"api/#Internals","page":"API documentation","title":"Internals","text":"","category":"section"},{"location":"api/","page":"API documentation","title":"API documentation","text":"CitableLibrary.UuidUrn\nCitableLibrary.uuidUrn","category":"page"},{"location":"api/#CitableLibrary.UuidUrn","page":"API documentation","title":"CitableLibrary.UuidUrn","text":"A UUID value in URN notation.\n\n\n\n\n\n","category":"type"},{"location":"api/#CitableLibrary.uuidUrn","page":"API documentation","title":"CitableLibrary.uuidUrn","text":"Generate a new UuidUrn\n\nuuidUrn()\n\n\n\n\n\n\n","category":"function"},{"location":"trait/#The-CitableLibraryTrait","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"","category":"section"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"The  CitableLibraryTrait applies to collections of content that can be retrieved by reference to URNs. Implementations of the CitableLibraryTrait can be searched by URN value, can be serialized to CEX format, and can be iterated using Julia's generic Iteration interface.","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"To comply with Julia's Iterators interface, types supporting the CitableLibraryTrait should implement at least iterate(iter) and iterate(iter, state):  see the Julia documentation.","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"To make the collection searchable and serializable, the type should support the urnequals, urncontains and cex functions.  The following example illustrates how you can do that.","category":"page"},{"location":"trait/#How-to-implement-the-CitableLibraryTrait","page":"The CitableLibraryTrait","title":"How to implement the CitableLibraryTrait","text":"","category":"section"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"In this example, we'll create a collection type for a reading list of books, and make it comply with the CitableLibraryTrait.  To do that, we'll need to use both the CitableLibrary and CitableBase packages.","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"using CitableLibrary\nusing CitableBase","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"The CitableLibraryTrait requires us to be able to find contain by URN values. We could use existing implementations of the URN abstraction (such as the Cite2Urn and the CtsUrn), but for this example we'll invent our own URN type. Our ReadingList type will be nothing more than a list of those URN values.","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"struct Isbn10Urn <: Urn\n    isbn::AbstractString\nend\nisbns = [Isbn10Urn(\"urn:isbn:022661283X\"),Isbn10Urn(\"urn:isbn:3030234134\"),Isbn10Urn(\"urn:isbn:022656875X\")]","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"To print and display our custom type, it can be convenient to override Base.show.","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"import Base: show\nfunction show(io::IO, u::Isbn10Urn)\n    print(io, u.isbn)\nend\nisbns[1]","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"A ReadingList will maintain a Vector of these Isbn10Urns.","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"struct ReadingList\n    reff::Vector{Isbn10Urn}\nend\nreadingList = ReadingList(isbns)","category":"page"},{"location":"trait/#Defining-a-CitableLibraryTrait","page":"The CitableLibraryTrait","title":"Defining a CitableLibraryTrait","text":"","category":"section"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"The first step is to define that our new type fulfills the CitableLibraryTrait.","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"import CitableLibrary: CitableLibraryTrait\nCitableLibraryTrait(::Type{ReadingList}) = CitableLibraryCollection()","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"We can verify that we've done that correctly.","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"CitableLibraryTrait(typeof(readingList))","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"This can also be verified using the citable function:","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"citable(readingList)","category":"page"},{"location":"trait/#Implement-the-required-functions","page":"The CitableLibraryTrait","title":"Implement the required functions","text":"","category":"section"},{"location":"trait/#Iteration","page":"The CitableLibraryTrait","title":"Iteration","text":"","category":"section"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"import CitableLibrary: toblocks\nimport CitableLibrary: fromblocks","category":"page"},{"location":"trait/#Serialization-to-CEX","page":"The CitableLibraryTrait","title":"Serialization to CEX","text":"","category":"section"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"A real application would serialize a citable collection to one of the defined blocks of a CEX document.  For this demo, we'll use a fake block heading, and serialize our URNs one per line.","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"# Format as one ISBN string per line.\nfunction cex(reading::ReadingList)\n    header = \"#!fakecexblock\\n\"\n    strings = map(ref -> ref.isbn, reading.reff)\n    header * join(strings, \"\\n\")\nend","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"# Instantiate a ReadingList from CEX:\nfunction fromcex(src::AbstractString, ReadingList)\n    isbns = []\n    lines = split(src, \"\\n\")\n    for i in 2:length(lines)\n        push!(isbns,Isbn10Urn(lines[i]))\n    end\n    ReadingList(isbns)\nend","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"cex returns a text block. This demo returns a simple list of values with a header line.","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"cex(readingList) |> print","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"fromcex reads a CEX block and instantiates a collection.","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"block = \"\"\"#!fakecexblock\nurn:isbn:022661283X\nurn:isbn:3030234134\nurn:isbn:022656875X\n\"\"\"\nfromcex(block, ReadingList)","category":"page"},{"location":"trait/#CitableLibraryTrait-functions","page":"The CitableLibraryTrait","title":"CitableLibraryTrait functions","text":"","category":"section"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"import CitableLibrary: toblocks\nimport CitableLibrary: fromblocks\n\nfunction fromblocks(src::AbstractString, ReadingList)\n    fromcex(src, ReadingList)\nend\n\nfunction toblocks(reading::ReadingList)\n    cex(reading)\nend","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"cexstring = toblocks(readingList)","category":"page"},{"location":"trait/","page":"The CitableLibraryTrait","title":"The CitableLibraryTrait","text":"list2 = fromblocks(cexstring, ReadingList)","category":"page"},{"location":"collection/#Citable-collections","page":"Citable collections","title":"Citable collections","text":"","category":"section"},{"location":"collection/","page":"Citable collections","title":"Citable collections","text":"A CiteLibrary has a list of zero or more citable collections. Citable collections can be queried using URN logic because their contents must in turn be citable objects.  ","category":"page"},{"location":"collection/","page":"Citable collections","title":"Citable collections","text":"For this example, we'll define a custom type of citable collection that we'll use throughout this documentation.  The type will manage a list of books, identified by their ISBN numbers.  We'll invent our own URN type for ISBN numbers, and define a ReadingList type as just a list of these ISBN values.  For our URN type, we'll follow the URN syntax requirements for a URN type named isbn.","category":"page"},{"location":"collection/","page":"Citable collections","title":"Citable collections","text":"The ISBN-10 format is incredibly complicated, with each of its four components being variable in length.    We'll restrict ourselves to ISBNs for books published in English-, French- or German-speaking countries, indicated by an initial digit of 0 or 1 (English), 2 (French) or 3 (German).  ","category":"page"},{"location":"collection/","page":"Citable collections","title":"Citable collections","text":"warning: Warning\nIn a real program, we would enforce this limitation with appropriate validation of the constructor, but to keep this example brief and focused on the requirements of citable collections, we'll pass through strings to the constructor unchecked.","category":"page"},{"location":"collection/","page":"Citable collections","title":"Citable collections","text":"As a convenience, we'll implement the equality function == for our new type.  We'll define two ReadingLists as equivalent if their reff fields have equivalent content.","category":"page"},{"location":"collection/","page":"Citable collections","title":"Citable collections","text":"using CitableLibrary\nusing CitableBase\n\nstruct Isbn10Urn <: Urn\n    isbn::AbstractString\nend\n\ndistanthorizons = Isbn10Urn(\"urn:isbn:022661283X\")\nquantitativeintertextuality = Isbn10Urn(\"urn:isbn:3030234134\")\nenumerations = Isbn10Urn(\"urn:isbn:022656875X\")\nwrong = Isbn10Urn(\"urn:isbn:1108922036\")\njane = Isbn10Urn(\"urn:isbn:0141395203\") # Because all computational literary analysis is required to use Jane Austen as an example\n\nstruct ReadingList\n    reff::Vector{Isbn10Urn}\nend\n\nimport Base.==\nfunction ==(rl1::ReadingList, rl2::ReadingList)\n    r1.reff == r2.reff\nend\n\nrl = ReadingList([distanthorizons,enumerations, enumerations, wrong, jane])\nlength(rl.reff)","category":"page"},{"location":"collection/#Recognizing-behaviors","page":"Citable collections","title":"Recognizing behaviors","text":"","category":"section"},{"location":"collection/","page":"Citable collections","title":"Citable collections","text":"Note that Isbn10Urn is a subtype of Urn. This makes the Isbn10Urn recognizable as fulfilling the UrnComparableTrait, meaing that objects of that type can be compared using URN logic. (On the next page, we'll look at how to implement URN comparison for our Isbn10Urn type, as well as for our collection type, ReadingList.)  We can verify this with the urncomparable function from CitableBase.","category":"page"},{"location":"collection/","page":"Citable collections","title":"Citable collections","text":"urncomparable(distanthorizons)","category":"page"},{"location":"collection/","page":"Citable collections","title":"Citable collections","text":"By contrast, citable collections do not all fall within a single type hierarchy.  We will instead identify them using a trait. ","category":"page"},{"location":"collection/","page":"Citable collections","title":"Citable collections","text":"We first identify our ReadingList type as fulfilling this trait by importing the CitableLibraryTrait type and assigning it a value of CitableLibraryCollection() for our ReadingList.  We can test whether this assignment is recognized with the citablecollection function.","category":"page"},{"location":"collection/","page":"Citable collections","title":"Citable collections","text":"import CitableLibrary: CitableLibraryTrait\nCitableLibraryTrait(::Type{ReadingList}) = CitableLibraryCollection()\n\ncitablecollection(rl)","category":"page"},{"location":"library/","page":"The CiteLibrary","title":"The CiteLibrary","text":"using CitableLibrary\nusing CitableBase\n\nstruct Isbn10Urn <: Urn\n    isbn::AbstractString\nend\n\ndistanthorizons = Isbn10Urn(\"urn:isbn:022661283X\")\nquantitativeintertextuality = Isbn10Urn(\"urn:isbn:3030234134\")\nenumerations = Isbn10Urn(\"urn:isbn:022656875X\")\nwrong = Isbn10Urn(\"urn:isbn:1108922036\")\njane = Isbn10Urn(\"urn:isbn:0141395203\") # Because all computational literary analysis is required to use Jane Austen as an example\n\nstruct ReadingList\n    reff::Vector{Isbn10Urn}\nend\n\nimport CitableLibrary: CitableLibraryTrait\nCitableLibraryTrait(::Type{ReadingList}) = CitableLibraryCollection()\n\n\n\nimport CitableBase: CexTrait\nCexTrait(::Type{ReadingList}) = CexSerializable()\n\nimport CitableBase: cex\nfunction cex(reading::ReadingList; delimiter = \"|\")\n    header = \"#!citecollection\\n\"\n    strings = map(ref -> ref.isbn, reading.reff)\n    header * join(strings, \"\\n\")\nend\n\n\nrl = ReadingList([distanthorizons,enumerations, enumerations, wrong, jane])","category":"page"},{"location":"library/#The-CiteLibrary:-a-citable-object","page":"The CiteLibrary","title":"The CiteLibrary: a citable object","text":"","category":"section"},{"location":"library/","page":"The CiteLibrary","title":"The CiteLibrary","text":"Once we have a list of citable collections, we can build a library as easily as passing the list to the library function.","category":"page"},{"location":"library/","page":"The CiteLibrary","title":"The CiteLibrary","text":"citelib = library([rl])","category":"page"},{"location":"library/","page":"The CiteLibrary","title":"The CiteLibrary","text":"The library is itself a citable object!","category":"page"},{"location":"library/","page":"The CiteLibrary","title":"The CiteLibrary","text":"citable(citelib)","category":"page"},{"location":"library/#Finding-out-about-the-library","page":"The CiteLibrary","title":"Finding out about the library","text":"","category":"section"},{"location":"library/","page":"The CiteLibrary","title":"The CiteLibrary","text":"Since the library is a citable object, it implements the urn and label functions.","category":"page"},{"location":"library/","page":"The CiteLibrary","title":"The CiteLibrary","text":"urn(citelib)","category":"page"},{"location":"library/","page":"The CiteLibrary","title":"The CiteLibrary","text":"label(citelib)","category":"page"},{"location":"library/","page":"The CiteLibrary","title":"The CiteLibrary","text":"These values were generated automatically, but you can supply your own values with optional parameters. (See the API documentation for full details.)","category":"page"},{"location":"library/","page":"The CiteLibrary","title":"The CiteLibrary","text":"labelledlib = library([rl], libname = \"Library id'ed by automatically generated URN, but manually supplied label\")\n\nlabel(labelledlib)","category":"page"},{"location":"library/","page":"The CiteLibrary","title":"The CiteLibrary","text":"Default values for other data you can optionally define manually:","category":"page"},{"location":"library/","page":"The CiteLibrary","title":"The CiteLibrary","text":"license(citelib)","category":"page"},{"location":"library/","page":"The CiteLibrary","title":"The CiteLibrary","text":"cexversion(citelib)","category":"page"},{"location":"library/#Find-out-about-the-library'-collections","page":"The CiteLibrary","title":"Find out about the library' collections","text":"","category":"section"},{"location":"library/","page":"The CiteLibrary","title":"The CiteLibrary","text":"A single library might include collections of multiple types.  You find out what types of collecetions appear in your library.","category":"page"},{"location":"library/","page":"The CiteLibrary","title":"The CiteLibrary","text":"collectiontypes(citelib)","category":"page"},{"location":"library/","page":"The CiteLibrary","title":"The CiteLibrary","text":"Of course you can also get a list of the colletions themselves.","category":"page"},{"location":"library/","page":"The CiteLibrary","title":"The CiteLibrary","text":"collections(citelib)","category":"page"},{"location":"library/","page":"The CiteLibrary","title":"The CiteLibrary","text":"You can include a second parameter to limit the returned list to collections of a particular type.  This example finds all collections of type ReadingList.","category":"page"},{"location":"library/","page":"The CiteLibrary","title":"The CiteLibrary","text":"collections(citelib, ReadingList)","category":"page"},{"location":"library/#Serializing-to-CEX","page":"The CiteLibrary","title":"Serializing to CEX","text":"","category":"section"},{"location":"library/","page":"The CiteLibrary","title":"The CiteLibrary","text":"A citable library is serializable to and from CEX.","category":"page"},{"location":"library/","page":"The CiteLibrary","title":"The CiteLibrary","text":"cexserializable(citelib)","category":"page"},{"location":"library/","page":"The CiteLibrary","title":"The CiteLibrary","text":"Therefore we can use the cex function to generate a plain-text representation of the library's contents.","category":"page"},{"location":"library/","page":"The CiteLibrary","title":"The CiteLibrary","text":"cexview = cex(citelib)\nprintln(cexview)","category":"page"},{"location":"library/#Instantiating-a-whole-library-from-CEX","page":"The CiteLibrary","title":"Instantiating a whole library from CEX","text":"","category":"section"},{"location":"library/","page":"The CiteLibrary","title":"The CiteLibrary","text":"The inverse function of cex is fromcex: this function can instantiate an entire CITE library from CEX source, given a dictionary mapping different parts of the library's contents to Julia types.","category":"page"},{"location":"library/","page":"The CiteLibrary","title":"The CiteLibrary","text":"You can build up complex libraries of mixed contents from the simple labelled blocks that CEX defines. Because the parsing of CEX contents for an entire library and assignment of different types of contents to dynamically mapped types can be quite involved, the fromcex function for the CiteLibrary type is implemented in the CiteEXchange package, where it can draw on the CEX parsing functions of that package.  See the documentation of the CiteEXchange package for full information about how to use fromcex to create a CiteLibrary.","category":"page"},{"location":"urncomparison/","page":"Filtering with URN logic","title":"Filtering with URN logic","text":"using CitableLibrary\nusing CitableBase\n\nstruct Isbn10Urn <: Urn\n    isbn::AbstractString\nend\n\ndistanthorizons = Isbn10Urn(\"urn:isbn:022661283X\")\nquantitativeintertextuality = Isbn10Urn(\"urn:isbn:3030234134\")\nenumerations = Isbn10Urn(\"urn:isbn:022656875X\")\nwrong = Isbn10Urn(\"urn:isbn:1108922036\")\njane = Isbn10Urn(\"urn:isbn:0141395203\") # Because all computational literary analysis is required to use Jane Austen as an example\n\nstruct ReadingList\n    reff::Vector{Isbn10Urn}\nend\n\nrl = ReadingList([distanthorizons,enumerations, enumerations, wrong, jane])","category":"page"},{"location":"urncomparison/#Filtering-with-URN-logic","page":"Filtering with URN logic","title":"Filtering with URN logic","text":"","category":"section"},{"location":"urncomparison/","page":"Filtering with URN logic","title":"Filtering with URN logic","text":"The CitableBase package identifies three kinds of URN comparison: equality, containment and similarity.  We want to be able to apply that logic to query our new ReadingList type.  If your citable collection includes objects cited by Cite2Urn or CtsUrn, this is as simple as filtering the collection using their urnequals, urncontains or urnsimilar functions.  Since we have defined a custom Isbn10Urn type, we'll need to implement those functions for our new URN type. We'll digress briefly with that implementation before turning to filtering our citable collection.","category":"page"},{"location":"urncomparison/","page":"Filtering with URN logic","title":"Filtering with URN logic","text":"note: Note\nFor an introduction to defining URN types and implementing the UrnComparable trait, see the documentation for the CitableBase package ","category":"page"},{"location":"urncomparison/#Digression:-implementing-URN-comparison-on-Isbn10Urn","page":"Filtering with URN logic","title":"Digression: implementing URN comparison on Isbn10Urn","text":"","category":"section"},{"location":"urncomparison/","page":"Filtering with URN logic","title":"Filtering with URN logic","text":"The CitableBase package provides a concrete implementation of urnequals, but we need to import and define functions for urncontains and urnsimilar","category":"page"},{"location":"urncomparison/#Containment","page":"Filtering with URN logic","title":"Containment","text":"","category":"section"},{"location":"urncomparison/","page":"Filtering with URN logic","title":"Filtering with URN logic","text":"For our ISBN type, we'll define \"containment\" as true when two ISBNS belong to the same initial-digit group (0 - 4).  We'll use the components functions from CitableBase to extract the third part of the URN string, and compare its first character.","category":"page"},{"location":"urncomparison/","page":"Filtering with URN logic","title":"Filtering with URN logic","text":"import CitableBase: urncontains\nfunction urncontains(u1::Isbn10Urn, u2::Isbn10Urn)\n    initial1 = components(u1.isbn)[3][1]\n    initial2 = components(u2.isbn)[3][1]\n\n    initial1 == initial2\nend","category":"page"},{"location":"urncomparison/","page":"Filtering with URN logic","title":"Filtering with URN logic","text":"Both Distant Horizons and Enumerations are in ISBN group 0.","category":"page"},{"location":"urncomparison/","page":"Filtering with URN logic","title":"Filtering with URN logic","text":"urncontains(distanthorizons, enumerations)","category":"page"},{"location":"urncomparison/","page":"Filtering with URN logic","title":"Filtering with URN logic","text":"But Can We Be Wrong? is in ISBN group 1.","category":"page"},{"location":"urncomparison/","page":"Filtering with URN logic","title":"Filtering with URN logic","text":"urncontains(distanthorizons, wrong)","category":"page"},{"location":"urncomparison/#Similarity","page":"Filtering with URN logic","title":"Similarity","text":"","category":"section"},{"location":"urncomparison/","page":"Filtering with URN logic","title":"Filtering with URN logic","text":"We'll define \"similarity\" as belonging to the same language area.  In this definition, both 0 and 1 indicate English-language countries.","category":"page"},{"location":"urncomparison/","page":"Filtering with URN logic","title":"Filtering with URN logic","text":"# True if ISBN starts with `0` or `1`\nfunction english(urn::Isbn10Urn)\n    langarea = components(urn.isbn)[3][1]\n    langarea == '0' || langarea == '1'\nend\n\nimport CitableBase: urnsimilar\nfunction urnsimilar(u1::Isbn10Urn, u2::Isbn10Urn)\n    initial1 = components(u1.isbn)[3][1]\n    initial2 = components(u2.isbn)[3][1]\n\n    (english(u1) && english(u2)) ||  initial1 == initial2\nend","category":"page"},{"location":"urncomparison/","page":"Filtering with URN logic","title":"Filtering with URN logic","text":"Both Distant Horizons and Can We Be Wrong? are published in English-language areas.","category":"page"},{"location":"urncomparison/","page":"Filtering with URN logic","title":"Filtering with URN logic","text":"urnsimilar(distanthorizons, wrong)","category":"page"},{"location":"urncomparison/#Filtering-a-citable-collection","page":"Filtering with URN logic","title":"Filtering a citable collection","text":"","category":"section"},{"location":"urncomparison/","page":"Filtering with URN logic","title":"Filtering with URN logic","text":"Whether you use Cite2Urns, CtsUrns, or define your own URN type, as we did for ISBNs, filtering a collection of your content with URN logic is straightforward. All you need to do is define functions for urnequals, urncontains and urnsimilar that take a URN parameter to filter with (here, an Isbn10Urn), and a citable collection to filter (here, a ReadingList).  If no objects match, we'll return nothing; otherwise, we'll return a list of content matching your URN.","category":"page"},{"location":"urncomparison/","page":"Filtering with URN logic","title":"Filtering with URN logic","text":"function urnequals(isbn::Isbn10Urn, rlist::ReadingList)\n    matches = filter(i -> i == isbn, rlist.reff)\n    isempty(matches) ? nothing : matches\nend\n\nfunction urncontains(isbn::Isbn10Urn, rlist::ReadingList)\n    matches = filter(i -> urncontains(i, isbn), rlist.reff)\n    isempty(matches) ? nothing : matches\nend\n\nfunction urnsimilar(isbn::Isbn10Urn, rlist::ReadingList)\n    matches = filter(i -> urnsimilar(i, isbn), rlist.reff)\n    isempty(matches) ? nothing : matches\nend","category":"page"},{"location":"urncomparison/","page":"Filtering with URN logic","title":"Filtering with URN logic","text":"urnequals(jane, rl)","category":"page"},{"location":"urncomparison/","page":"Filtering with URN logic","title":"Filtering with URN logic","text":"group1 = Isbn10Urn(\"urn:isbn:1\")\nurncontains(group1, rl)","category":"page"},{"location":"urncomparison/","page":"Filtering with URN logic","title":"Filtering with URN logic","text":"urnsimilar(group1, rl)","category":"page"},{"location":"iteration/","page":"Iteration","title":"Iteration","text":"using CitableLibrary\nusing CitableBase\n\nstruct Isbn10Urn <: Urn\n    isbn::AbstractString\nend\n\ndistanthorizons = Isbn10Urn(\"urn:isbn:022661283X\")\nquantitativeintertextuality = Isbn10Urn(\"urn:isbn:3030234134\")\nenumerations = Isbn10Urn(\"urn:isbn:022656875X\")\nwrong = Isbn10Urn(\"urn:isbn:1108922036\")\njane = Isbn10Urn(\"urn:isbn:0141395203\") # Because all computational literary analysis is required to use Jane Austen as an example\n\nstruct ReadingList\n    reff::Vector{Isbn10Urn}\nend\n\nrl = ReadingList([distanthorizons,enumerations, enumerations, wrong, jane])","category":"page"},{"location":"iteration/#Iterating-collections","page":"Iteration","title":"Iterating collections","text":"","category":"section"},{"location":"iteration/","page":"Iteration","title":"Iteration","text":"Citable collections should be usable with any Julia functions that recognize the Iterators conventions.  We need to implement the Base.iterate method for our collection with two functions:  one with a single parameter for our collection, and one with a second parameter you can use to maintain state through an iteration.  The return value should be one element of the collection, or nothing when you reach the end.","category":"page"},{"location":"iteration/","page":"Iteration","title":"Iteration","text":"Since our reading list is just a Vector, we can keep an index to the Vector in our state parameter, and trivially walk through the Vector by index value.","category":"page"},{"location":"iteration/","page":"Iteration","title":"Iteration","text":"import Base: iterate\n\nfunction iterate(rlist::ReadingList)\n    (rlist.reff[1], 2)\nend\n\nfunction iterate(rlist::ReadingList, state)\n    if state > length(rlist.reff)\n        nothing\n    else\n        (rlist.reff[state], state + 1)\n    end\nend","category":"page"},{"location":"iteration/","page":"Iteration","title":"Iteration","text":"for item in rl\n    println(item)\nend","category":"page"},{"location":"cex/","page":"Serializing a citable collection","title":"Serializing a citable collection","text":"using CitableLibrary\nusing CitableBase\n\nstruct Isbn10Urn <: Urn\n    isbn::AbstractString\nend\n\ndistanthorizons = Isbn10Urn(\"urn:isbn:022661283X\")\nquantitativeintertextuality = Isbn10Urn(\"urn:isbn:3030234134\")\nenumerations = Isbn10Urn(\"urn:isbn:022656875X\")\nwrong = Isbn10Urn(\"urn:isbn:1108922036\")\njane = Isbn10Urn(\"urn:isbn:0141395203\") # Because all computational literary analysis is required to use Jane Austen as an example\n\nstruct ReadingList\n    reff::Vector{Isbn10Urn}\nend\n\nimport Base.==\nfunction ==(rl1::ReadingList, rl2::ReadingList)\n    rl1.reff == rl2.reff\nend\n\nrl = ReadingList([distanthorizons,enumerations, enumerations, wrong, jane])","category":"page"},{"location":"cex/#Serializing-collections","page":"Serializing a citable collection","title":"Serializing collections","text":"","category":"section"},{"location":"cex/","page":"Serializing a citable collection","title":"Serializing a citable collection","text":"In addition to making our citable collection comparable on URN logic and iterable, we must make it serializable to and from CEX format.   When we defined our Isbn10Urn type, it automatically inherited the UrnComparable trait because it was a subtype of Urn.  We saw this when we tested a collection with the urncomparable function.","category":"page"},{"location":"cex/","page":"Serializing a citable collection","title":"Serializing a citable collection","text":"urncomparable(jane)","category":"page"},{"location":"cex/","page":"Serializing a citable collection","title":"Serializing a citable collection","text":"In contrast, CEX-serializable content does not all fall within a single type hierarchy.  Instead, we will implement the CexTrait from CitableBase.  ","category":"page"},{"location":"cex/#Defining-our-type-as-serializable","page":"Serializing a citable collection","title":"Defining our type as serializable","text":"","category":"section"},{"location":"cex/","page":"Serializing a citable collection","title":"Serializing a citable collection","text":"We first define our ReadingList type as serializable by importing the CexTrait type and assigning it a value of CexSerializable() for our type.  We can test whether this assignment is recognized  using the cexserializable function from CitableBase.","category":"page"},{"location":"cex/","page":"Serializing a citable collection","title":"Serializing a citable collection","text":"import CitableBase: CexTrait\nCexTrait(::Type{ReadingList}) = CexSerializable()\n\ncexserializable(rl)","category":"page"},{"location":"cex/","page":"Serializing a citable collection","title":"Serializing a citable collection","text":"When cexserializable is true, we know that CitableBase will dispatch functions to our type correctly.","category":"page"},{"location":"cex/#Implementing-the-required-functions","page":"Serializing a citable collection","title":"Implementing the required functions","text":"","category":"section"},{"location":"cex/","page":"Serializing a citable collection","title":"Serializing a citable collection","text":"Now we can implement the pair of inverse functions cex and fromcex from CitableBase.","category":"page"},{"location":"cex/","page":"Serializing a citable collection","title":"Serializing a citable collection","text":"To serialize our collection to CEX format, we'll compose a citecollection type of CEX block, and simply list each ISBN's string value, one per line.","category":"page"},{"location":"cex/","page":"Serializing a citable collection","title":"Serializing a citable collection","text":"import CitableBase: cex\nfunction cex(reading::ReadingList; delimiter = \"|\")\n    header = \"#!citecollection\\n\"\n    strings = map(ref -> ref.isbn, reading.reff)\n    header * join(strings, \"\\n\")\nend","category":"page"},{"location":"cex/","page":"Serializing a citable collection","title":"Serializing a citable collection","text":"Let's see what our reading list looks in this format.","category":"page"},{"location":"cex/","page":"Serializing a citable collection","title":"Serializing a citable collection","text":"cexoutput = cex(rl)\nprintln(cexoutput)","category":"page"},{"location":"cex/","page":"Serializing a citable collection","title":"Serializing a citable collection","text":"Now we'll write a function to instantiate a ReadingList from a string source.","category":"page"},{"location":"cex/","page":"Serializing a citable collection","title":"Serializing a citable collection","text":"warning: Warning\nTo keep this illustration brief and focused on the design of citable collections, we will naively begin reading data once we see a line containing the block header citecollection, and just read to the end of the file. This would fail on anything but the most trivial CEX source. For a real application, we would instead use the CiteEXchange package to work with CEX source data.  It includes functions to extract blocks and data lines by type or identifying URN, for example.","category":"page"},{"location":"cex/","page":"Serializing a citable collection","title":"Serializing a citable collection","text":"import CitableBase: fromcex\nfunction fromcex(src::AbstractString, ReadingList)\n    isbns = []\n    lines = split(src, \"\\n\")\n    inblock = false\n    for ln in lines\n        if ln == \"#!citecollection\"\n            inblock = true\n        elseif inblock\n            push!(isbns,Isbn10Urn(ln))\n        end \n    end\n    ReadingList(isbns)\nend","category":"page"},{"location":"cex/","page":"Serializing a citable collection","title":"Serializing a citable collection","text":"The acid test: can we roundtrip the CEX output back to an equivalent ReadingList?","category":"page"},{"location":"cex/","page":"Serializing a citable collection","title":"Serializing a citable collection","text":"rl2 = fromcex(cexoutput, ReadingList)\nrl == rl2","category":"page"},{"location":"#CitableLibrary.jl","page":"Home","title":"CitableLibrary.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The  CitableLibrary package defines a type, the CiteLibrary, which includes one or more collections of citable resources","category":"page"},{"location":"#Citable-collections","page":"Home","title":"Citable collections","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Collections of citable resources (or more briefly, citable collections) must implement four kinds of behavior.","category":"page"},{"location":"","page":"Home","title":"Home","text":"iteration. Citable collections can be used with any Julia functions working with iterable collections.\nURN comparison Collections can be queried by filtering their identifiers with URN logic.\nserialization of individual collections. Individual citable collections can be be losslessly serialized to plain-text representation in CEX format and instantiated from the same plain-text representation","category":"page"},{"location":"#Citable-libraries","page":"Home","title":"Citable libraries","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The CiteLibrary is a citable object:  it can be cited by URN, and identified with a human-readable label.  It is also serializable, and can be losslessly represented in CEX format and instantiated from the same plain-text representation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"warning: Warning\nThe fromcex function for the CiteLibrary type is defined in a separate package CiteEXchange.  See the explanation in these pages and the documentation for  CiteEXchange","category":"page"},{"location":"","page":"Home","title":"Home","text":"The following pages provide a working example of how a citable collection relates to a citable library. First we define a custom type of citable collection, then implement each of its required behaviors, and finally add a collection to a CiteLibrary, and show some ways it can be used.","category":"page"}]
}
