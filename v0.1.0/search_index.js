var documenterSearchIndex = {"docs":
[{"location":"#CitableLibrary.jl","page":"Home","title":"CitableLibrary.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The CitableLibrary package defines the CitableLibraryTrait. The trait applies to collections of content that can be retrieved by referene to URNs. Implementations of the CitableLibraryTrait can be searched by URN value, can be serialized to CEX format, and can be iterated using Julia's generic Iterator interface.","category":"page"},{"location":"","page":"Home","title":"Home","text":"To comply with Julia's Iteration interface, types supporting the CitableLibraryTrait should implemnt at least iterate(iter) and iterate(iter, state):  see the Julia documentation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"To make the collection searchable and serializable, the type should support the urnequals, urncontains and cex functions.  The following example illustrates how you can do that.","category":"page"},{"location":"#How-to-implement-the-CitableLibraryTrait","page":"Home","title":"How to implement the CitableLibraryTrait","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In this example, we'll create a collection type for a reading list of books, and make it comply with the CitableLibraryTrait.  To do that, we'll need to use both the CitableLibrary and CitableBase packages.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using CitableLibrary\nusing CitableBase","category":"page"},{"location":"","page":"Home","title":"Home","text":"The CitableLibraryTrait requires us to be able to find contain by URN values. We could use existing implementations of the URN abstraction (such as the Cite2Urn and the CtsUrn), but for this example we'll invent our own URN type. Our ReadingList type will be nothing more than a list of those URN values.","category":"page"},{"location":"","page":"Home","title":"Home","text":"struct IsbnUrn <: Urn\n    isbn::AbstractString\nend\n\nstruct ReadingList\n    reff::Vector{IsbnUrn}\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"Now we can instantiate a ReadingList.","category":"page"},{"location":"","page":"Home","title":"Home","text":"isbns = [IsbnUrn(\"urn:isbn:022661283X\"),IsbnUrn(\"urn:isbn:3030234134\"),IsbnUrn(\"urn:isbn:022656875X\")]\nreadingList = ReadingList(isbns)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The next step is to define that our new type fulfills the CitableLibraryTrait.","category":"page"},{"location":"","page":"Home","title":"Home","text":"import CitableLibrary: CitableLibraryTrait\nCitableLibraryTrait(::Type{ReadingList}) = CitableLibraryCollection()","category":"page"},{"location":"","page":"Home","title":"Home","text":"We can verify that we've done that correctly.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CitableLibraryTrait(typeof(readingList))","category":"page"},{"location":"","page":"Home","title":"Home","text":"Now we need to define specific methods for the three functions urnequals, urncontains and cex.  First we import them (rather than using them).","category":"page"},{"location":"","page":"Home","title":"Home","text":"import CitableLibrary: urnequals\nimport CitableLibrary: urncontains\nimport CitableLibrary: cex","category":"page"},{"location":"","page":"Home","title":"Home","text":"All our implementation needs to do is specify the correct type for our collection.  (For ISBN URNs, we've chosen to implement urncontains and urnequals similarly, but you can define containment in whatever way is appropriate for the URN type you are using.)","category":"page"},{"location":"","page":"Home","title":"Home","text":"# Returns one IsbnUrn or nothing\nfunction urnequals(u::IsbnUrn, faves::ReadingList)\n    filtered = filter(ref -> ref == u, faves.reff)\n    isempty(filtered) ? nothing : filtered[1]\nend\n\n# Returns a (possibly empty) list of IsbnUrns\nfunction urncontains(u::IsbnUrn, faves::ReadingList)\n    filter(ref -> ref == u, faves.reff)\nend\n\n# Format as one ISBN string per line.\n# In a real implementation, you would certainly\n# implement `write` for your URN type instead of directly \n# manipulating fields.\nfunction cex(reading::ReadingList)\n    header = \"ISBN\\n\"\n    strings = map(ref -> ref.isbn, reading.reff)\n    header * join(strings, \"\\n\")\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"Let's test our new type.","category":"page"},{"location":"","page":"Home","title":"Home","text":"# URN we'll search for:\ndistant = isbns[1]\nurnequals(distant, readingList)","category":"page"},{"location":"","page":"Home","title":"Home","text":"urncontains(distant, readingList)","category":"page"},{"location":"","page":"Home","title":"Home","text":"cex(readingList) |> print","category":"page"}]
}
